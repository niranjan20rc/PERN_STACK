DATABASE_URL=postgresql://neondb_owner:npg_1FEvk7zowfSy@ep-rapid-cell-abrufv9p-pooler.eu-west-2.aws.neon.tech/neondb?sslmode=require&channel_binding=require


import dotenv from 'dotenv';
dotenv.config();

import express from 'express';
import cors from 'cors';
import pkg from 'pg';

const { Pool } = pkg;
const app = express();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

app.use(cors());
app.use(express.json());

// Ensure table exists
(async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS todos (
        todo_id SERIAL PRIMARY KEY,
        description TEXT NOT NULL
      )
    `);
    console.log('‚úÖ Table initialized');
  } catch (err) {
    console.error('DB Init Error:', err.message);
  }
})();

// All API routes
app.get('/', (_req, res) => res.send('üü¢ API is running'));

app.post('/todos', async (req, res) => {
  try {
    const { description } = req.body;
    const result = await pool.query(
      'INSERT INTO todos(description) VALUES($1) RETURNING *',
      [description]
    );
    res.json(result.rows[0]);
  } catch (err) {
    res.status(500).json({ error: 'Server error' });
  }
});

app.get('/todos', async (_req, res) => {
  try {
    const result = await pool.query('SELECT * FROM todos ORDER BY todo_id DESC');
    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ error: 'Server error' });
  }
});

app.get('/todos/:id', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM todos WHERE todo_id = $1', [req.params.id]);
    res.json(result.rows[0] || {});
  } catch (err) {
    res.status(500).json({ error: 'Server error' });
  }
});

app.put('/todos/:id', async (req, res) => {
  try {
    await pool.query('UPDATE todos SET description = $1 WHERE todo_id = $2', [
      req.body.description,
      req.params.id
    ]);
    res.json({ message: 'Todo updated' });
  } catch (err) {
    res.status(500).json({ error: 'Server error' });
  }
});

app.delete('/todos/:id', async (req, res) => {
  try {
    await pool.query('DELETE FROM todos WHERE todo_id = $1', [req.params.id]);
    res.json({ message: 'Todo deleted' });
  } catch (err) {
    res.status(500).json({ error: 'Server error' });
  }
});

export default app;


import React, { useEffect, useState } from "react";
import axios from "axios";
import { ClipLoader } from "react-spinners";
import "./App.css"; // we'll add styles here

const API_URL = "https://pern-stack-api.vercel.app/todos";

function App() {
  const [description, setDescription] = useState("");
  const [todos, setTodos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  const fetchTodos = async () => {
    setIsLoading(true);
    try {
      const res = await axios.get(API_URL);
      setTodos(res.data);
    } catch (err) {
      console.error("Error fetching todos:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const addTodo = async () => {
    if (!description.trim()) return;
    setIsLoading(true);
    try {
      await axios.post(API_URL, { description });
      setDescription("");
      await fetchTodos();
    } catch (err) {
      console.error("Error adding todo:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const deleteTodo = async (id) => {
    setIsLoading(true);
    try {
      await axios.delete(`${API_URL}/${id}`);
      await fetchTodos();
    } catch (err) {
      console.error("Error deleting todo:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const updateTodo = async (id, newDesc) => {
    setIsLoading(true);
    try {
      await axios.put(`${API_URL}/${id}`, { description: newDesc });
      await fetchTodos();
    } catch (err) {
      console.error("Error updating todo:", err);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchTodos();
  }, []);

  if (isLoading) {
    return (
      <div className="loader-container">
        <ClipLoader color="#3498db" size={60} loading={true} />
      </div>
    );
  }

  return (
    <div style={styles.container}>
      <h1>PERN ToDo List ‚úÖ</h1>

      <div style={styles.inputBox}>
        <input
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          placeholder="Add a task..."
          style={styles.input}
        />
        <button onClick={addTodo} style={styles.addBtn}>Add</button>
      </div>

      <ul style={styles.todoList}>
        {todos.map((todo) => (
          <li key={todo.todo_id} style={styles.todoItem}>
            <input
              defaultValue={todo.description}
              onBlur={(e) =>
                updateTodo(todo.todo_id, e.target.value)
              }
              style={styles.todoText}
            />
            <button
              onClick={() => deleteTodo(todo.todo_id)}
              style={styles.delBtn}
            >
              ‚ùå
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
}

const styles = {
  container: { padding: 30, maxWidth: 600, margin: "auto", fontFamily: "sans-serif" },
  inputBox: { display: "flex", marginBottom: 20 },
  input: { flex: 1, padding: 10, fontSize: 16 },
  addBtn: { padding: "10px 20px", marginLeft: 10, cursor: "pointer" },
  todoList: { listStyle: "none", padding: 0 },
  todoItem: {
    display: "flex",
    alignItems: "center",
    marginBottom: 10,
    borderBottom: "1px solid #ccc",
    paddingBottom: 5,
  },
  todoText: { flex: 1, padding: 8, fontSize: 16 },
  delBtn: { marginLeft: 10, cursor: "pointer", background: "none", border: "none", fontSize: 20 },
};

export default App;
